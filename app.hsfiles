{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0.0
synopsis: FILL ME OUT.
description: Please see README.md
homepage: https://github.com/{{github-username}}{{^github-username}}c-t-k{{/github-username}}/{{name}}#readme
license: BSD3
author: {{author-name}}{{^author-name}}Chris Kaminski{{/author-name}}
maintainer: {{author-name}}{{^author-name}}Chris Kaminski{{/author-name}} <{{author-email}}{{^author-email}}chris.t.kaminski@gmail.com{{/author-email}}>
copyright: {{copyright}}{{^copyright}}{{year}} {{author-name}}{{^author-name}}Chris Kaminski{{/author-name}}{{/copyright}}
category: {{category}}{{^category}}Web{{/category}}
github: {{github-username}}{{^github-username}}c-t-k{{/github-username}}/{{name}}

ghc-options: -Wall -fwarn-tabs -fno-warn-type-defaults

default-extensions:
  - ConstraintKinds
  - DeriveGeneric
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - KindSignatures
  - MultiParamTypeClasses
  - MultiWayIf
  - NoImplicitPrelude
  - LambdaCase
  - RankNTypes
  - ScopedTypeVariables

other-extensions:
  - OverloadedStrings

dependencies:
  - base >= 4.7 && < 5
  - ansi-terminal
  - ansi-wl-pprint
  - async
  - basic-prelude
  - bytestring
  - containers
  - deepseq
  - directory
  - filepath
  - process
  - mtl
  - safe
  - stm
  - string-conversions
  - text
  - text-format
  - transformers
  - unordered-containers
  - vector

when:
  - condition: os(windows)
    then:
      dependencies: Win32
    else:
      dependencies: unix

library:
  source-dirs: src

executables:
  {{name}}:
    source-dirs: app
    main: Main.hs
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    dependencies:
      - {{name}}
      - optparse-applicative

tests:
  {{name}}-test:
    source-dirs: test
    main: Spec.hs
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    dependencies:
      - {{name}}
      - hspec
      - QuickCheck
      - tasty
      - tasty-quickcheck
      - tasty-hspec

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Intro.hs    #-}
module Intro
  ( module Intro
  ) where

import           BasicPrelude                 as Intro hiding
  (decodeUtf8, encodeUtf8, fpFromText, fpToString, fpToText, ltextToString, readMay, textToString)
import           Control.Concurrent.STM       as Intro
import           Control.DeepSeq              as Intro
import           Control.Monad.Except         as Intro
import           Control.Monad.Reader         as Intro
import           Intro.Functor                as Intro
import           Intro.Monad                  as Intro
import           Intro.String                 as Intro
import           Safe                         as Intro

{-# START_FILE src/Intro/Functor.hs #-}
module Intro.Functor where

import           Data.Functor
import           Prelude      (flip)

forF :: (Functor f) => f a -> (a -> b) -> f b
forF = flip fmap

{-# START_FILE src/Intro/Monad.hs #-}
module Intro.Monad where

import           Control.Monad
import           Data.Bool     (Bool)
import           Data.Either
import           Data.Foldable

while :: Monad m => (a -> Bool) -> m a -> m a
while c x = do
  res <- x
  if c res then while c x
  else return res

whenM :: Monad m => m Bool -> m () -> m ()
whenM c x = c >>= (`when` x)

unlessM :: Monad m => m Bool -> m () -> m ()
unlessM c x = c >>= (`unless` x)

ifThenElseM :: Monad m => m Bool -> m a -> m a -> m a
ifThenElseM c l r = c >>= \c' -> if c' then l else r

foldedM :: (Foldable t, Monad m) => b -> t a -> (a -> b -> m b) -> m b
foldedM z xs f = foldrM f z xs

eitherM :: Monad m => (a -> m c) -> (b -> m c) -> m (Either a b) -> m c
eitherM f g x = do
  x' <- x
  case x' of
    Left xl -> f xl
    Right xr -> g xr

{-# START_FILE src/Intro/String.hs #-}
module Intro.String
    ( module Data.String.Conversions
    , module Intro.String
    , String
    ) where

import           BasicPrelude            (MonadIO)
import           Data.String             (String)
import           Data.String.Conversions
import           Data.Text.Format        as Intro.String hiding (print)
import           Data.Text.Format        as F
import           Data.Text.Format.Params as Intro.String

--------------------------------------------------------------------------------
-- * Convenience aliases
--------------------------------------------------------------------------------

-- | Type that can be converted to a strict bytestring
type ToSBS a = ConvertibleStrings a SBS
-- | Type that can be recovered from a strict bytestring
type FromSBS a = ConvertibleStrings SBS a

-- | Type that can be converted to a lazy bytestring
type ToLBS a = ConvertibleStrings a LBS
-- | Type that can be recovered from a lazy bytestring
type FromLBS a = ConvertibleStrings LBS a

-- | Type that can be converted to a strict text
type ToST a = ConvertibleStrings a ST
-- | Type that can be recovered from a strict text
type FromST a = ConvertibleStrings ST a

-- | Type that can be converted to a lazy text
type ToLT a = ConvertibleStrings a LT
-- | Type that can be recovered from a lazy text
type FromLT a = ConvertibleStrings LT a

-- | Type that can be converted to a string
type ToString a = ConvertibleStrings a String
-- | Type that can be recovered from a string
type FromString a = ConvertibleStrings String a

printf :: (MonadIO m, Params ps) => Format -> ps -> m ()
printf = F.print

{-# START_FILE app/Main.hs     #-}
{-# LANGUAGE OverloadedStrings #-}

import           Intro

main :: IO ()
main = putStrLn "Main not yet implemented"

{-# START_FILE test/Spec.hs    #-}
{-# LANGUAGE OverloadedStrings #-}

import           Intro

main :: IO ()
main = putStrLn "Test suite not yet implemented"

{-# START_FILE .ghci #-}
:set +m

:set -XBangPatterns
:set -XConstraintKinds
:set -XCPP
:set -XDeriveGeneric
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XFunctionalDependencies
:set -XGADTs
:set -XKindSignatures
:set -XLambdaCase
:set -XMultiParamTypeClasses
:set -XMultiWayIf
:set -XInstanceSigs
:set -XRankNTypes
:set -XRecordWildCards
:set -XScopedTypeVariables
:set -XTupleSections
:set -XTypeFamilies
:set -XTypeOperators

:set prompt "> "

{-# START_FILE .stylish-haskell.yaml #-}
columns: 100
language_extensions:
  - ConstraintKinds
  - DeriveGeneric
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - KindSignatures
  - MultiParamTypeClasses
  - MultiWayIf
  - NoImplicitPrelude
  - LambdaCase
  - RankNTypes
  - ScopedTypeVariables
steps:
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true
  - imports:
      align: global
      list_align: after_alias
      long_list_align: new_line_multiline
      list_padding: 4
      separate_lists: true
  - language_pragmas:
      style: vertical
      align: true
      remove_redundant: true

{-# START_FILE .gitignore #-}
# Created by https://www.gitignore.io/api/haskell

### Haskell ###
dist
dist-*
cabal-dev
*.o
*.hi
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
*.eventlog
.stack-work/
cabal.project.local

{-# START_FILE .editorconfig #-}
root = true
charset = utf-8

[*]
end_of_line = lf
insert_final_newline = true

[*.{yaml,yml}]
indent_style = space
indent_size = 2

[*.hs]
indent_style = space
indent_size = 4

{-# START_FILE README.md #-}
# {{name}}
Fill me out.

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Chris Kaminski{{/author-name}} (c) {{year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
